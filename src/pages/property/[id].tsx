import { PrismaClient } from "@prisma/client";
import { GetStaticPaths, GetStaticProps, type NextPage } from "next";
import Head from "next/head";
import { ParsedUrlQuery } from "querystring";

import { Property } from "../../types/property";

import { formatPrice, formatSurface } from "../../utils/property";

import Nav from "../../components/Nav";
import GoBackButton from "../../components/UI/GoBackButton";

type Props = {
  property?: Property;
};

const PropertyDetail: NextPage = ({ property }: Props) => {
  return (
    <>
      <Head>
        <title>Propiedad detalle</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Nav />
      <main className="mx-auto max-w-screen-lg ">
        <div className="pt-20">
          <GoBackButton />
          <section>
            <div className="py-6">
              <iframe
                width="1024"
                height="480"
                src="https://my.matterport.com/show/?m=KpBQUvEMirJ"
                allow="xr-spatial-tracking"
                allowFullScreen
              ></iframe>
            </div>
            <section className="border-b border-gray-400 pb-6">
              <h3 className="pb-4 font-semibold">
                {property?.address}{" "}
                <span className="text-base font-normal text-gray-400">
                  departamento, San Juan
                </span>
              </h3>
              {/* <p>{property?.operation}</p> */}
              <div className="flex gap-6">
                <p className="self-end text-2xl font-bold">
                  {formatPrice(property?.price ?? 0)}
                </p>
                <div className="ml-20 flex flex-col ">
                  <p className="text-xl font-semibold">
                    {" "}
                    {property?.ambiences}
                  </p>
                  <p className="text-sm text-gray-400">Ambientes</p>
                </div>
                <div>
                  <p className="text-xl font-semibold">
                    {" "}
                    {property?.bathrooms}
                  </p>
                  <p className="text-sm text-gray-400">Baños</p>
                </div>
                <div>
                  <p className="text-xl font-semibold">
                    {formatSurface(property?.extraInfo?.surface ?? 0)} m²
                  </p>
                  <p className="text-sm text-gray-400">Superficie</p>
                </div>
                <div>
                  <p className="text-xl font-semibold">
                    {property?.extraInfo?.buildYear}
                  </p>
                  <p className="text-sm text-gray-400">Año construcción</p>
                </div>
              </div>
            </section>
            <section className="py-4">
              <h3 className="pb-2 text-xl font-semibold">Descripción:</h3>
              <p className="text-gray-200">
                {property?.extraInfo?.description}
              </p>
            </section>
            MAPA
            <section className="py-4">
              <h3 className="pb-2 text-xl font-semibold">Destacados:</h3>
              <div className="grid grid-cols-2 ">
                <div className="flex">
                  <p className="basis-1/3 text-gray-300">Estacionamiento:</p>
                  <p className="font-semibold">
                    {property?.extraInfo?.parking ? "SI" : "NO"}
                  </p>
                </div>
                <div className="flex">
                  <p className="basis-1/3 text-gray-300">Mascotas:</p>
                  <p className="font-semibold">
                    {property?.extraInfo?.petsAllowed ? "SI" : "NO"}
                  </p>
                </div>
                <div className="flex">
                  <p className="basis-1/3 text-gray-300">A/C:</p>
                  <p className="font-semibold">
                    {property?.extraInfo?.airConditioning ? "SI" : "NO"}
                  </p>
                </div>
                <div className="flex">
                  <p className="basis-1/3 text-gray-300">Comodidades:</p>
                </div>
              </div>
            </section>
          </section>
        </div>
      </main>
    </>
  );
};

interface IParams extends ParsedUrlQuery {
  id: string;
}

export const getStaticProps: GetStaticProps = async (context) => {
  const prisma = new PrismaClient();
  const { id } = context.params as IParams;
  const property = await prisma?.property.findUnique({
    where: { id },
    include: { extraInfo: true },
  });

  return {
    props: {
      property: JSON.parse(JSON.stringify(property)),
    },
    revalidate: 10,
  };
};

export const getStaticPaths: GetStaticPaths<IParams> = async () => {
  const prisma = new PrismaClient();
  const properties = await prisma?.property.findMany({
    select: {
      id: true,
    },
  });

  return {
    paths: properties?.map((property) => ({
      params: {
        id: property.id,
      },
    })),
    fallback: "blocking",
  };
};

export default PropertyDetail;
