import { PrismaClient } from "@prisma/client";
import {
  GetStaticPaths,
  GetStaticProps,
  InferGetStaticPropsType,
  type NextPage,
} from "next";
import Head from "next/head";
import { ParsedUrlQuery } from "querystring";
import GoBackButton from "../../components/UI/GoBackButton";
import { Property } from "../../types/property";
import { formatPrice } from "../../utils/property";

type Props = {
  property?: Property;
};

const PropertyDetail: NextPage = ({ property }: Props) => {
  return (
    <>
      <Head>
        <title>Propiedad detalle</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className=" ">
        <GoBackButton />
        <section>
          <div>DETAIL</div>

          <iframe
            width="853"
            height="480"
            src="https://my.matterport.com/show/?m=KpBQUvEMirJ"
            allow="xr-spatial-tracking"
          ></iframe>
          <p>{property?.operation}</p>
          <p>{formatPrice(property?.price ?? 0)}</p>
          <p>{property?.address}</p>
        </section>
      </main>
    </>
  );
};

interface IParams extends ParsedUrlQuery {
  id: string;
}

export const getStaticProps: GetStaticProps = async (context) => {
  const prisma = new PrismaClient();
  const { id } = context.params as IParams;
  const property = await prisma?.property.findUnique({ where: { id } });

  return {
    props: {
      property: JSON.parse(JSON.stringify(property)),
    },
    revalidate: 10,
  };
};

export const getStaticPaths: GetStaticPaths<IParams> = async () => {
  const prisma = new PrismaClient();
  const properties = await prisma?.property.findMany({
    select: {
      id: true,
    },
  });

  return {
    paths: properties?.map((property) => ({
      params: {
        id: property.id,
      },
    })),
    fallback: "blocking",
  };
};

export default PropertyDetail;
